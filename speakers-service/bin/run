#!/usr/bin/env node

const axios = require('axios');
const http = require('http');
// configs retrieved from index.js
const config = require('../config')[process.env.NODE_ENV || 'development'];

const log = config.log();
const service = require('../server/service')(config);

const server = http.createServer(service);

// Important - a service should not have a fixed port but should randomly choose one
// Passing 0 chooses a random free port
server.listen(0);

server.on('listening', () => {
    const registerService = () => axios.put(`http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`);
    const unregisterService = () => axios.delete(`http://localhost:3000/register/${config.name}/${config.version}/${server.address().port}`);
    registerService();
    const interval = setInterval(registerService, config.heartbeat * 1000);

    // cleanup handles error situations to unregister the service from the service registry
    const cleanup = async () => {
        clearInterval(interval);
        await unregisterService();
    };

    process.on('uncaughtException', async () => {
        await cleanup();
        process.exit(0);
    });

    process.on('SIGTERM', async () => {
        await cleanup();
        process.exit(0);
    });

    process.on('SIGINT', async () => {
        await cleanup();
        process.exit(0);
    });

    // Throws an exception after 10s which triggers the process uncaughtException handler!
    // setTimeout(() => {
    //     throw new Error("Some error occurred");
    // }, 10000);

    log.info(
        `Hi there! I'm listening on port ${server.address().port} in ${service.get('env')} mode.`,
    );
});